#app/handlers/callback/persona_chat.py
import logging

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.handlers.callback.constant import MAX_LEN
from app.resources.assets.role_dict import ROLE_SPECS
from app.resources.assets.states import PersonTalk
from app.resources.keyboards.inline import (
    chat_inline_kb,
    get_person_inline_kb,
    person_inline_kb,
)
from app.resources.text.anonce import start_text
from app.services.llm_provider import get_llm_answer

gpt_answer = get_llm_answer()

log = logging.getLogger(__name__)

router = Router(name="persona_chat")


@router.callback_query(F.data == "dialog_persona")
async def persona_start_handler(call: CallbackQuery, state: FSMContext)-> None:
    """
    :param call: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
    :param state: –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ TEXT_TRANSLATE
    :return: –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–∏—á–Ω–æ—Å—Ç–µ–π
    """
    await call.answer()
    await state.set_state(PersonTalk.TEXT_PERSONA)
    if isinstance(call.message, Message):
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å", parse_mode="HTML", reply_markup=get_person_inline_kb()
        )


@router.callback_query(F.data.startswith("ROLE:"))
async def set_persona_handler(call: CallbackQuery, state: FSMContext)-> None:
    """
    :param call: –ª–æ–≤–∏–º —Å–∏–≥–Ω–∞–ª –æ –ª–∏—á–Ω–æ—Å—Ç–∏
    :param state: TEXT_TRANSLATE state –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    :return: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–∞–µ–º –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è
                –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–º–µ–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await state.set_state(PersonTalk.TEXT_PERSONA)

    # –í—Å—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –±–ª–æ–∫–∞
    if isinstance(call.data, str):
        role_new = call.data.split(":", 1)[1]
        await state.update_data(role=role_new)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
        if role_new in ROLE_SPECS:
            role_present = ROLE_SPECS[role_new]["label"]
            new_role_text = f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_present}"

            if isinstance(call.message, Message):
                await call.message.edit_text(new_role_text, reply_markup=person_inline_kb())


@router.message(StateFilter(PersonTalk.TEXT_PERSONA), F.text)
async def fsm_text_persona_handler(m: Message, state: FSMContext)-> None:
    """
    :param m: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—â–µ–Ω–∏—è —Å –ª–∏—á–Ω–æ—Å—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±—ã –±—ã–ª —Ç–µ–∫—Å—Ç –∏ –Ω–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π
    :param state: TEXT_TRANSLATE
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∫–∞ –¥—É–º–∞–µ—Ç
    """
    if not m.text:
        await m.answer("–ù—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")
    elif len(m.text) > MAX_LEN:
        await m.answer(
            f"–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–æ {MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {len(m.text)} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    data = await state.get_data()
    role = data.get("role", "einstein")
    spec = ROLE_SPECS[role]
    role_hint = spec["hint"]
    log.info(f"{role_hint}")
    chat_text = f"{m.text}"
    msg_role = await m.answer(f"{spec['label']} –¥—É–º–∞–µ—Ç")
    response = await gpt_answer(
        "persona",
        user_text=chat_text,
        role_hint=role_hint,
        temperature=spec["temperature"],
        max_tokens=spec["max_tokens"],
    )

    await msg_role.edit_text(response, reply_markup=chat_inline_kb())


# –¢–∞–∫ –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–º–µ–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏


@router.callback_query(F.data == "switch_role")
async def switch_persona_handler(call: CallbackQuery, state: FSMContext)-> None:
    log.info("–ü–æ–π–º–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏")
    await state.set_state(PersonTalk.TEXT_PERSONA)
    if isinstance(call.message, Message):
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç—å", parse_mode="HTML", reply_markup=get_person_inline_kb()
        )


@router.callback_query(F.data == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cancel_persona_handler(call: CallbackQuery, state: FSMContext)-> None:
    log.debug("–ü–æ–π–º–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'")
    if isinstance(call.message, Message):
        await call.message.edit_text(start_text, parse_mode="HTML", reply_markup=chat_inline_kb())
    await state.clear()
